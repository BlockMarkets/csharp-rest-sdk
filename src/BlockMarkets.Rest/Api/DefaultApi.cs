/* 
 * BlockMarkets Cryptocurrency API
 *
 * The BlockMarkets API provides real-time and historical market data on cryptocurrencies from the world's leading crypto exchanges. Sign up for a free, unlimited API key at [BlockMarkets Cryptocurrency API](https://www.blockmarkets.io/cryptocurrency-api).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BlockMarkets.Rest.Client;
using BlockMarkets.Rest.Model;

namespace BlockMarkets.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Empty</returns>
        Empty BenchmarkRate (string symbol);

        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> BenchmarkRateWithHttpInfo (string symbol);
        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>Empty</returns>
        Empty BenchmarkRateHistory (string symbol, string close = null);

        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> BenchmarkRateHistoryWithHttpInfo (string symbol, string close = null);
        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Empty</returns>
        Empty ListAssetMarkets (string symbol);

        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListAssetMarketsWithHttpInfo (string symbol);
        /// <summary>
        /// Returns a list of supported assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        Empty ListAssets ();

        /// <summary>
        /// Returns a list of supported assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListAssetsWithHttpInfo ();
        /// <summary>
        /// Returns a list of supported USD benchmark rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        Empty ListBenchmarkRates ();

        /// <summary>
        /// Returns a list of supported USD benchmark rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListBenchmarkRatesWithHttpInfo ();
        /// <summary>
        /// Returns a list of markets for a specific exchange.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>Empty</returns>
        Empty ListExchangeMarkets (string exchange);

        /// <summary>
        /// Returns a list of markets for a specific exchange.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListExchangeMarketsWithHttpInfo (string exchange);
        /// <summary>
        /// Returns a list of supported exchanges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        Empty ListExchanges ();

        /// <summary>
        /// Returns a list of supported exchanges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListExchangesWithHttpInfo ();
        /// <summary>
        /// Returns a list of supported markets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        Empty ListMarkets ();

        /// <summary>
        /// Returns a list of supported markets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListMarketsWithHttpInfo ();
        /// <summary>
        /// Returns a list of markets for a specific asset pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Empty</returns>
        Empty ListPairMarkets (string pair);

        /// <summary>
        /// Returns a list of markets for a specific asset pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListPairMarketsWithHttpInfo (string pair);
        /// <summary>
        /// Returns a list of supported asset pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        Empty ListPairs ();

        /// <summary>
        /// Returns a list of supported asset pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListPairsWithHttpInfo ();
        /// <summary>
        /// Returns a list of supported USD spot rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        Empty ListSpotRates ();

        /// <summary>
        /// Returns a list of supported USD spot rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> ListSpotRatesWithHttpInfo ();
        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Empty</returns>
        Empty MarketBook (string exchange, string pair);

        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> MarketBookWithHttpInfo (string exchange, string pair);
        /// <summary>
        /// Returns OHLCV history for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        Empty MarketOHLCV (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null);

        /// <summary>
        /// Returns OHLCV history for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> MarketOHLCVWithHttpInfo (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null);
        /// <summary>
        /// Returns the latest ticker for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Empty</returns>
        Empty MarketTicker (string exchange, string pair);

        /// <summary>
        /// Returns the latest ticker for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> MarketTickerWithHttpInfo (string exchange, string pair);
        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        Empty MarketTrades (string exchange, string pair, int? limit = null, string start = null, string end = null);

        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> MarketTradesWithHttpInfo (string exchange, string pair, int? limit = null, string start = null, string end = null);
        /// <summary>
        /// Returns the last USD spot rate for an asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Empty</returns>
        Empty SpotRate (string symbol);

        /// <summary>
        /// Returns the last USD spot rate for an asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> SpotRateWithHttpInfo (string symbol);
        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        Empty SpotRateHistory (string symbol, int? limit = null, string start = null, string end = null);

        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> SpotRateHistoryWithHttpInfo (string symbol, int? limit = null, string start = null, string end = null);
        /// <summary>
        /// Returns the OHLCV history for a spot rate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        Empty SpotRateOHLCV (string symbol, int? limit = null, int? interval = null, string start = null, string end = null);

        /// <summary>
        /// Returns the OHLCV history for a spot rate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> SpotRateOHLCVWithHttpInfo (string symbol, int? limit = null, int? interval = null, string start = null, string end = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> BenchmarkRateAsync (string symbol);

        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> BenchmarkRateAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> BenchmarkRateHistoryAsync (string symbol, string close = null);

        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> BenchmarkRateHistoryAsyncWithHttpInfo (string symbol, string close = null);
        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListAssetMarketsAsync (string symbol);

        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListAssetMarketsAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Returns a list of supported assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListAssetsAsync ();

        /// <summary>
        /// Returns a list of supported assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListAssetsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a list of supported USD benchmark rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListBenchmarkRatesAsync ();

        /// <summary>
        /// Returns a list of supported USD benchmark rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListBenchmarkRatesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a list of markets for a specific exchange.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListExchangeMarketsAsync (string exchange);

        /// <summary>
        /// Returns a list of markets for a specific exchange.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListExchangeMarketsAsyncWithHttpInfo (string exchange);
        /// <summary>
        /// Returns a list of supported exchanges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListExchangesAsync ();

        /// <summary>
        /// Returns a list of supported exchanges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListExchangesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a list of supported markets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListMarketsAsync ();

        /// <summary>
        /// Returns a list of supported markets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListMarketsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a list of markets for a specific asset pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListPairMarketsAsync (string pair);

        /// <summary>
        /// Returns a list of markets for a specific asset pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListPairMarketsAsyncWithHttpInfo (string pair);
        /// <summary>
        /// Returns a list of supported asset pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListPairsAsync ();

        /// <summary>
        /// Returns a list of supported asset pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListPairsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a list of supported USD spot rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> ListSpotRatesAsync ();

        /// <summary>
        /// Returns a list of supported USD spot rates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> ListSpotRatesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> MarketBookAsync (string exchange, string pair);

        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> MarketBookAsyncWithHttpInfo (string exchange, string pair);
        /// <summary>
        /// Returns OHLCV history for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> MarketOHLCVAsync (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null);

        /// <summary>
        /// Returns OHLCV history for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> MarketOHLCVAsyncWithHttpInfo (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null);
        /// <summary>
        /// Returns the latest ticker for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> MarketTickerAsync (string exchange, string pair);

        /// <summary>
        /// Returns the latest ticker for a market pair.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> MarketTickerAsyncWithHttpInfo (string exchange, string pair);
        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> MarketTradesAsync (string exchange, string pair, int? limit = null, string start = null, string end = null);

        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> MarketTradesAsyncWithHttpInfo (string exchange, string pair, int? limit = null, string start = null, string end = null);
        /// <summary>
        /// Returns the last USD spot rate for an asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> SpotRateAsync (string symbol);

        /// <summary>
        /// Returns the last USD spot rate for an asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> SpotRateAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> SpotRateHistoryAsync (string symbol, int? limit = null, string start = null, string end = null);

        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> SpotRateHistoryAsyncWithHttpInfo (string symbol, int? limit = null, string start = null, string end = null);
        /// <summary>
        /// Returns the OHLCV history for a spot rate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> SpotRateOHLCVAsync (string symbol, int? limit = null, int? interval = null, string start = null, string end = null);

        /// <summary>
        /// Returns the OHLCV history for a spot rate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> SpotRateOHLCVAsyncWithHttpInfo (string symbol, int? limit = null, int? interval = null, string start = null, string end = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private BlockMarkets.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new BlockMarkets.Rest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BlockMarkets.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = BlockMarkets.Rest.Client.Configuration.Default;

            ExceptionFactory = BlockMarkets.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(BlockMarkets.Rest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BlockMarkets.Rest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BlockMarkets.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlockMarkets.Rest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlockMarkets.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Empty</returns>
        public Empty BenchmarkRate (string symbol)
        {
             ApiResponse<Empty> localVarResponse = BenchmarkRateWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > BenchmarkRateWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->BenchmarkRate");

            var localVarPath = "/v1/rates/benchmark/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BenchmarkRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> BenchmarkRateAsync (string symbol)
        {
             ApiResponse<Empty> localVarResponse = await BenchmarkRateAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the latest available benchmark rates for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> BenchmarkRateAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->BenchmarkRate");

            var localVarPath = "/v1/rates/benchmark/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BenchmarkRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>Empty</returns>
        public Empty BenchmarkRateHistory (string symbol, string close = null)
        {
             ApiResponse<Empty> localVarResponse = BenchmarkRateHistoryWithHttpInfo(symbol, close);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > BenchmarkRateHistoryWithHttpInfo (string symbol, string close = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->BenchmarkRateHistory");

            var localVarPath = "/v1/rates/benchmark/{symbol}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (close != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close", close)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BenchmarkRateHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> BenchmarkRateHistoryAsync (string symbol, string close = null)
        {
             ApiResponse<Empty> localVarResponse = await BenchmarkRateHistoryAsyncWithHttpInfo(symbol, close);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns historical benchmark rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="close">The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> BenchmarkRateHistoryAsyncWithHttpInfo (string symbol, string close = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->BenchmarkRateHistory");

            var localVarPath = "/v1/rates/benchmark/{symbol}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (close != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close", close)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BenchmarkRateHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Empty</returns>
        public Empty ListAssetMarkets (string symbol)
        {
             ApiResponse<Empty> localVarResponse = ListAssetMarketsWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListAssetMarketsWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->ListAssetMarkets");

            var localVarPath = "/v1/assets/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssetMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListAssetMarketsAsync (string symbol)
        {
             ApiResponse<Empty> localVarResponse = await ListAssetMarketsAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of all markets (base and quote) for a specific asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListAssetMarketsAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->ListAssetMarkets");

            var localVarPath = "/v1/assets/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssetMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported assets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        public Empty ListAssets ()
        {
             ApiResponse<Empty> localVarResponse = ListAssetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of supported assets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListAssetsWithHttpInfo ()
        {

            var localVarPath = "/v1/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported assets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListAssetsAsync ()
        {
             ApiResponse<Empty> localVarResponse = await ListAssetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of supported assets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListAssetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported USD benchmark rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        public Empty ListBenchmarkRates ()
        {
             ApiResponse<Empty> localVarResponse = ListBenchmarkRatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of supported USD benchmark rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListBenchmarkRatesWithHttpInfo ()
        {

            var localVarPath = "/v1/rates/benchmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBenchmarkRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported USD benchmark rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListBenchmarkRatesAsync ()
        {
             ApiResponse<Empty> localVarResponse = await ListBenchmarkRatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of supported USD benchmark rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListBenchmarkRatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/rates/benchmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBenchmarkRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of markets for a specific exchange. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>Empty</returns>
        public Empty ListExchangeMarkets (string exchange)
        {
             ApiResponse<Empty> localVarResponse = ListExchangeMarketsWithHttpInfo(exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of markets for a specific exchange. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListExchangeMarketsWithHttpInfo (string exchange)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->ListExchangeMarkets");

            var localVarPath = "/v1/exchanges/{exchange}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExchangeMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of markets for a specific exchange. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListExchangeMarketsAsync (string exchange)
        {
             ApiResponse<Empty> localVarResponse = await ListExchangeMarketsAsyncWithHttpInfo(exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of markets for a specific exchange. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListExchangeMarketsAsyncWithHttpInfo (string exchange)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->ListExchangeMarkets");

            var localVarPath = "/v1/exchanges/{exchange}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExchangeMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported exchanges. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        public Empty ListExchanges ()
        {
             ApiResponse<Empty> localVarResponse = ListExchangesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of supported exchanges. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListExchangesWithHttpInfo ()
        {

            var localVarPath = "/v1/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExchanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported exchanges. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListExchangesAsync ()
        {
             ApiResponse<Empty> localVarResponse = await ListExchangesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of supported exchanges. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListExchangesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExchanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported markets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        public Empty ListMarkets ()
        {
             ApiResponse<Empty> localVarResponse = ListMarketsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of supported markets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListMarketsWithHttpInfo ()
        {

            var localVarPath = "/v1/markets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported markets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListMarketsAsync ()
        {
             ApiResponse<Empty> localVarResponse = await ListMarketsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of supported markets. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListMarketsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/markets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of markets for a specific asset pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Empty</returns>
        public Empty ListPairMarkets (string pair)
        {
             ApiResponse<Empty> localVarResponse = ListPairMarketsWithHttpInfo(pair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of markets for a specific asset pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListPairMarketsWithHttpInfo (string pair)
        {
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->ListPairMarkets");

            var localVarPath = "/v1/pairs/{pair}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPairMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of markets for a specific asset pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListPairMarketsAsync (string pair)
        {
             ApiResponse<Empty> localVarResponse = await ListPairMarketsAsyncWithHttpInfo(pair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of markets for a specific asset pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListPairMarketsAsyncWithHttpInfo (string pair)
        {
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->ListPairMarkets");

            var localVarPath = "/v1/pairs/{pair}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPairMarkets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported asset pairs. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        public Empty ListPairs ()
        {
             ApiResponse<Empty> localVarResponse = ListPairsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of supported asset pairs. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListPairsWithHttpInfo ()
        {

            var localVarPath = "/v1/pairs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPairs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported asset pairs. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListPairsAsync ()
        {
             ApiResponse<Empty> localVarResponse = await ListPairsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of supported asset pairs. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListPairsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/pairs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPairs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported USD spot rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Empty</returns>
        public Empty ListSpotRates ()
        {
             ApiResponse<Empty> localVarResponse = ListSpotRatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of supported USD spot rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > ListSpotRatesWithHttpInfo ()
        {

            var localVarPath = "/v1/rates/spot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSpotRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns a list of supported USD spot rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> ListSpotRatesAsync ()
        {
             ApiResponse<Empty> localVarResponse = await ListSpotRatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of supported USD spot rates. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> ListSpotRatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/rates/spot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSpotRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Empty</returns>
        public Empty MarketBook (string exchange, string pair)
        {
             ApiResponse<Empty> localVarResponse = MarketBookWithHttpInfo(exchange, pair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > MarketBookWithHttpInfo (string exchange, string pair)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketBook");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketBook");

            var localVarPath = "/v1/markets/{exchange}/{pair}/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> MarketBookAsync (string exchange, string pair)
        {
             ApiResponse<Empty> localVarResponse = await MarketBookAsyncWithHttpInfo(exchange, pair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> MarketBookAsyncWithHttpInfo (string exchange, string pair)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketBook");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketBook");

            var localVarPath = "/v1/markets/{exchange}/{pair}/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns OHLCV history for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        public Empty MarketOHLCV (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = MarketOHLCVWithHttpInfo(exchange, pair, limit, interval, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns OHLCV history for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > MarketOHLCVWithHttpInfo (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketOHLCV");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketOHLCV");

            var localVarPath = "/v1/markets/{exchange}/{pair}/ohlcv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketOHLCV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns OHLCV history for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> MarketOHLCVAsync (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = await MarketOHLCVAsyncWithHttpInfo(exchange, pair, limit, interval, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns OHLCV history for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> MarketOHLCVAsyncWithHttpInfo (string exchange, string pair, int? limit = null, int? interval = null, string start = null, string end = null)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketOHLCV");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketOHLCV");

            var localVarPath = "/v1/markets/{exchange}/{pair}/ohlcv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketOHLCV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the latest ticker for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Empty</returns>
        public Empty MarketTicker (string exchange, string pair)
        {
             ApiResponse<Empty> localVarResponse = MarketTickerWithHttpInfo(exchange, pair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest ticker for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > MarketTickerWithHttpInfo (string exchange, string pair)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketTicker");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketTicker");

            var localVarPath = "/v1/markets/{exchange}/{pair}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketTicker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the latest ticker for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> MarketTickerAsync (string exchange, string pair)
        {
             ApiResponse<Empty> localVarResponse = await MarketTickerAsyncWithHttpInfo(exchange, pair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the latest ticker for a market pair. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> MarketTickerAsyncWithHttpInfo (string exchange, string pair)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketTicker");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketTicker");

            var localVarPath = "/v1/markets/{exchange}/{pair}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketTicker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        public Empty MarketTrades (string exchange, string pair, int? limit = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = MarketTradesWithHttpInfo(exchange, pair, limit, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > MarketTradesWithHttpInfo (string exchange, string pair, int? limit = null, string start = null, string end = null)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketTrades");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketTrades");

            var localVarPath = "/v1/markets/{exchange}/{pair}/trades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> MarketTradesAsync (string exchange, string pair, int? limit = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = await MarketTradesAsyncWithHttpInfo(exchange, pair, limit, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns trades for a market pair. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The 4-char exchange code (see /exchanges)</param>
        /// <param name="pair">The asset pair (see /pairs)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> MarketTradesAsyncWithHttpInfo (string exchange, string pair, int? limit = null, string start = null, string end = null)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling DefaultApi->MarketTrades");
            // verify the required parameter 'pair' is set
            if (pair == null)
                throw new ApiException(400, "Missing required parameter 'pair' when calling DefaultApi->MarketTrades");

            var localVarPath = "/v1/markets/{exchange}/{pair}/trades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            if (pair != null) localVarPathParams.Add("pair", this.Configuration.ApiClient.ParameterToString(pair)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the last USD spot rate for an asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Empty</returns>
        public Empty SpotRate (string symbol)
        {
             ApiResponse<Empty> localVarResponse = SpotRateWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the last USD spot rate for an asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > SpotRateWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->SpotRate");

            var localVarPath = "/v1/rates/spot/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpotRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the last USD spot rate for an asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> SpotRateAsync (string symbol)
        {
             ApiResponse<Empty> localVarResponse = await SpotRateAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the last USD spot rate for an asset. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> SpotRateAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->SpotRate");

            var localVarPath = "/v1/rates/spot/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpotRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        public Empty SpotRateHistory (string symbol, int? limit = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = SpotRateHistoryWithHttpInfo(symbol, limit, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > SpotRateHistoryWithHttpInfo (string symbol, int? limit = null, string start = null, string end = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->SpotRateHistory");

            var localVarPath = "/v1/rates/spot/{symbol}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpotRateHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> SpotRateHistoryAsync (string symbol, int? limit = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = await SpotRateHistoryAsyncWithHttpInfo(symbol, limit, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns historical spot rates for an asset. Requires premium subscription. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> SpotRateHistoryAsyncWithHttpInfo (string symbol, int? limit = null, string start = null, string end = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->SpotRateHistory");

            var localVarPath = "/v1/rates/spot/{symbol}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpotRateHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the OHLCV history for a spot rate. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Empty</returns>
        public Empty SpotRateOHLCV (string symbol, int? limit = null, int? interval = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = SpotRateOHLCVWithHttpInfo(symbol, limit, interval, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the OHLCV history for a spot rate. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > SpotRateOHLCVWithHttpInfo (string symbol, int? limit = null, int? interval = null, string start = null, string end = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->SpotRateOHLCV");

            var localVarPath = "/v1/rates/spot/{symbol}/ohlcv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpotRateOHLCV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Returns the OHLCV history for a spot rate. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> SpotRateOHLCVAsync (string symbol, int? limit = null, int? interval = null, string start = null, string end = null)
        {
             ApiResponse<Empty> localVarResponse = await SpotRateOHLCVAsyncWithHttpInfo(symbol, limit, interval, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the OHLCV history for a spot rate. 
        /// </summary>
        /// <exception cref="BlockMarkets.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The asset symbol (see /assets)</param>
        /// <param name="limit">Number of records to retrieve (default&#x3D;100, max&#x3D;1000) (optional)</param>
        /// <param name="interval">Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440) (optional)</param>
        /// <param name="start">Start datetime in ISO 8601 (optional)</param>
        /// <param name="end">End datetime in ISO 8601 (optional)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> SpotRateOHLCVAsyncWithHttpInfo (string symbol, int? limit = null, int? interval = null, string start = null, string end = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling DefaultApi->SpotRateOHLCV");

            var localVarPath = "/v1/rates/spot/{symbol}/ohlcv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpotRateOHLCV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

    }
}
